2025-04-22 01:23:32 - {"sender_id": "scheduler", "message": {"msg_type": "script", "msg_len": 3211, "msg_content": "from repository.lib_drone import *\nfrom repository.lib_center import *\nimport asyncio\nimport json\n\n# 子任务1：无人机1起飞到有利侦查位置，寻找到目标\ndef subtask1(id, drone, dronemonitor, p2p_node, dynamic_data):\n    \"\"\"子任务1：无人机1起飞到有利侦查位置，寻找到目标\"\"\"\n    # Step1: 无人机1起飞\n    log_info(id, \"下面执行步骤1：无人机起飞\")\n    for i in range(5):\n        log_info(id, f\"无人机起飞尝试第{i+1}次\")\n        if interrupt(drone):\n            log_info(id, f\"{drone} 受到中断信号\")\n            return False\n        log_info(id, f\"{drone} 执行起飞命令\")\n        takeoff(drone)\n        time.sleep(10)  # 假设起飞需要5秒\n        status = get_drone_status(dronemonitor)\n        log_info(id, f\"正在检查无人机{drone} 是否起飞成功\")\n        result,reason = check(drone, status, \"无人机是否已经起飞\")\n        if result:\n            log_info(id, f\"{drone} 起飞成功\")\n            break\n        else:\n            log_info(id, f\"无人机{drone}起飞失败，原因：{reason}\")\n    else:\n        log_info(id, f\"{drone} 起飞失败超过5次,任务终止\")\n        return False\n\n    # Step2: 无人机1上升到有利高度\n    log_info(id, \"下面执行步骤2：无人机上升到有利高度\")\n    for i in range(10):\n        log_info(id, f\"无人机尝试上升第{i+1}次\")\n        if interrupt(drone):\n            log_info(id, f\"{drone} 受到中断信号，停止上升\")\n            return False\n        log_info(id, f\"{drone} 执行上升命令\")\n        move_ascend(drone, 2, 1)  # 假设以2m/s的速度上升1秒\n        photo = take_photo(dronemonitor)\n        log_info(id, f\"{drone} 拍摄图像用于高度检查\")\n        photo_file = photo\n        status = get_drone_position(dronemonitor)\n        log_info(id, f\"正在检查无人机{drone} 是否达到有利高度\")\n        result,reason = check_with_picture(drone, status, \"观察图像，当无人机的高度没有障碍物时，可以认为处于了一个比较合适的观察高度，达到目标\", [photo_file])\n        if i == 8:\n            result = True\n        if result:\n            log_info(id, f\"{drone} 成功达到有利高度\")\n            break\n        else:\n            log_info(id, f\"无人机{drone} 上升失败，原因：{reason}\")\n    else:\n        log_info(id, f\"{drone} 上升失败超过10次,任务终止\")\n        return False\n\n    # Step3: 无人机1搜索目标\n    log_info(id, \"下面执行步骤3：无人机搜索目标\")\n    for i in range(5):\n        log_info(id, f\"无人机尝试搜索目标第{i+1}次\")\n        if interrupt(drone):\n            log_info(id, f\"{drone} 受到中断信号，停止搜索\")\n            return False\n        log_info(id, f\"{drone} 执行螺旋搜索\")\n        result, pos = spiral(drone, dronemonitor, \"person\", 5, 1, 15)\n        if result:\n            log_info(id, f\"找到目标person，位置：{pos}\")\n            \n            # 使用p2p_node发送数据消息\n            send_p2p_message(p2p_node, \"iris_0\", {\n                \"msg_len\":1,\n                \"msg_type\": \"data\",\n                \"msg_content\": json.dumps({\"target_position\": [6,6,6]})\n            })\n            log_info(id, f\"已发送目标位置数据到无人机iris_1\")\n            \n            land(drone)\n            \n            # 使用p2p_node发送通知启动消息\n            send_p2p_message(p2p_node, \"iris_0\", {\n                \"msg_len\":1,\n                \"msg_type\": \"start_notice\",\n                \"msg_content\": json.dumps({\n                    \"completed_task\": \"subtask1\",\n                    \"next_task\": \"subtask2\",\n                    \"status\": \"success\"\n                })\n            })\n            log_info(id, f\"已发送任务完成通知到无人机iris_1\")\n            \n            return True    \n        else:\n            log_info(id, f\"{drone} 未找到目标，扩大搜索范围\")\n    else:    \n        log_info(id, f\"{drone} 搜索目标失败超过5次,任务终止\")\n        return False\n\n\n\n\n\n"}, "timestamp": 1745310212.7336462}
